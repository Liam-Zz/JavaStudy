package com.liam.demo;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.serializer.SerializerFeature;

public class FastJsonDemo02 {
    public static void main(String[] args) {
        FastJsonDeomPersion persion = new FastJsonDeomPersion();
        persion.setName("Liam");
        persion.setAge(18);
        /*
            对比 Demo01
                调用`toJSONString`方法的时候，参数里面多了一个`SerializerFeature.WriteClassName`方法。

            细节：
            `SerializerFeature.WriteClassName`可以使得`Fastjson`支持自省，开启自省后序列化成`JSON`的数据就会多一个`@type`
            `FastJson`的漏洞就是他的这一个功能去产生的。
            在对该`JSON`数据进行反序列化的时候，会去调用指定类中对于的`get/set/is`方法
         */
        String s = JSON.toJSONString(persion, SerializerFeature.WriteClassName);
        System.out.println(s);
        /*
           三种反序列化方式

            方法一（返回JSONObject对象）：
            Person user = new Person();
            user.setAge(18);
            user.setName("xiaoming");
            String s1 = JSON.toJSONString(user, SerializerFeature.WriteClassName);
            JSONObject jsonObject = JSON.parse(s1);
            System.out.println(jsonObject);

            方法二：
            Person user = new Person();
            user.setAge(18);
            user.setName("xiaoming");
            String s = JSON.toJSONString(user);
            Person user1 = JSON.parseObject(s, Person.class);
            System.out.println(user1);

            方法三：
            Person user = new Person();
            user.setAge(18);
            user.setName("xiaoming");
            String s1 = JSON.toJSONString(user, SerializerFeature.WriteClassName);
            Person user1 = JSON.parseObject(s1,Person.class);
            System.out.println(user1);
         */
    }
}
